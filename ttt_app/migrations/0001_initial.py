# Generated by Django 2.0.6 on 2018-06-03 20:03

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import ttt_app.utils.ttt_enums


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('name', models.TextField()),
                ('user_moves_counter', models.IntegerField(default=0)),
                ('total_number_of_gmaes', models.IntegerField(default=0)),
                ('number_played_as_x', models.IntegerField(default=0)),
                ('number_played_as_circle', models.IntegerField(default=0)),
                ('email', models.EmailField(max_length=254, null=True, unique=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Games',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_start_time', models.DateTimeField()),
                ('game_moves_counter', models.IntegerField(default=0)),
                ('board_state', models.CharField(max_length=200)),
                ('game_state', models.IntegerField(default=ttt_app.utils.ttt_enums.GameState(0))),
                ('x_player', models.TextField()),
                ('circle_player', models.TextField()),
                ('player_of_next_move', models.TextField()),
                ('winner', models.TextField(default='no winner yet')),
            ],
        ),
        migrations.CreateModel(
            name='UsersToGames',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_joined', models.DateTimeField()),
                ('user_selected_shape', models.IntegerField()),
                ('game_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ttt_app.Games')),
                ('user_email', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='users',
            name='games',
            field=models.ManyToManyField(through='ttt_app.UsersToGames', to='ttt_app.Games'),
        ),
        migrations.AddField(
            model_name='users',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='users',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
